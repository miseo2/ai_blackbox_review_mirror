pipeline {
  agent { label 'docker-agent-dood' }
  options {
    disableConcurrentBuilds()
  }

  parameters {
    string(name: 'BRANCH_NAME', defaultValue: 'develop', description: 'GitLab Î∏åÎûúÏπò Ïù¥Î¶Ñ')
    string(name: 'GIT_REPO_URL', defaultValue: 'https://lab.ssafy.com/s12-final/S12P31E203.git', description: 'GitLab Ï†ÄÏû•ÏÜå URL')
  }

  environment {
    DOCKER_IMAGE_NAME     = "deploy-service"
    DOCKER_TAG            = "deploy-${BUILD_NUMBER}"
    TEST_CONTAINER_NAME   = "deploy-test-${BUILD_NUMBER}"
    PROD_CONTAINER_NAME   = "deploy-service"
    PROD_PORT             = "8003"
  }

  stages {
    stage('Prepare & Clone') {
      steps {
        script {
          env.SAFE_REPO = params.GIT_REPO_URL.replaceFirst(/^(https?:\/\/)[^@]+@/, '$1')
        }
        withCredentials([usernamePassword(credentialsId: 'gitlab-project-token', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
          sh """
            echo "üîß Cloning from: ${env.SAFE_REPO}"
            REPO_DOMAIN=\$(echo "${env.SAFE_REPO}" | sed 's|^https://||')
            git clone -b "${params.BRANCH_NAME}" "https://${GIT_USER}:${GIT_PASS}@\${REPO_DOMAIN}" repo
          """
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('repo/deploy') {
          sh '''
            echo "üî® Deploy ÏÑúÎπÑÏä§ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."
            docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
          '''
        }
      }
    }

    stage('Run & Test') {
      steps {
        dir('repo/deploy') {
          withCredentials([file(credentialsId: 'env_file', variable: 'ENV_FILE')]) {
            sh '''
              echo "üß™ ÌÖåÏä§Ìä∏ Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ Ï§ë..."
              docker run -d \
                --name ${TEST_CONTAINER_NAME} \
                --env-file ${ENV_FILE} \
                ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}

              echo "‚è≥ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÎåÄÍ∏∞ Ï§ë..."
              timeout=30
              until docker exec ${TEST_CONTAINER_NAME} curl -sf http://localhost:${PROD_PORT}/; do
                sleep 1
                timeout=$((timeout - 1))
                if [ $timeout -le 0 ]; then
                  echo "‚ùå Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
                  docker logs ${TEST_CONTAINER_NAME} || true
                  docker stop ${TEST_CONTAINER_NAME} || true
                  docker rm   ${TEST_CONTAINER_NAME} || true
                  exit 1
                fi
              done

              echo "üßπ ÌÖåÏä§Ìä∏ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨"
              docker stop ${TEST_CONTAINER_NAME}
              docker rm   ${TEST_CONTAINER_NAME}
            '''
          }
        }
      }
    }

    stage('Deploy (if develop)') {
      when {
        expression { params.BRANCH_NAME == 'develop' }
      }
      steps {
        dir('repo/deploy') {
          withCredentials([file(credentialsId: 'env_file', variable: 'ENV_FILE')]) {
            sh '''
              echo "üöÄ develop Î∏åÎûúÏπò: ÏÑúÎπÑÏä§ Ïª®ÌÖåÏù¥ÎÑà Î∞∞Ìè¨ Ï§ë..."
              docker stop ${PROD_CONTAINER_NAME} || true
              docker rm   ${PROD_CONTAINER_NAME} || true

              docker run -d \
                --name ${PROD_CONTAINER_NAME} \
                --restart unless-stopped \
                -p ${PROD_PORT}:${PROD_PORT} \
                --env-file ${ENV_FILE} \
                ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}

              echo "‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å"
            '''
          }
        }
      }
    }
  }

  post {
    success {
      script {
        if (params.BRANCH_NAME != 'develop') {
          echo "üßπ develop Ïù¥Ïô∏ Î∏åÎûúÏπò: Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú"
          sh 'docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true'
        } else {
          echo "üßπ develop Î∏åÎûúÏπò: Ïù¥Ï†Ñ deploy-* Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨"
          sh '''
            docker images --format "{{.Repository}}:{{.Tag}}" | \
              grep "^deploy-service:deploy-" | \
              grep -v "${DOCKER_IMAGE_NAME}:${DOCKER_TAG}" | \
              xargs -r docker rmi || true
          '''
        }
      }
    }

    failure {
      echo "‚ùå Ïã§Ìå® Ïãú Ï†ïÎ¶¨"
      sh '''
        docker stop ${TEST_CONTAINER_NAME} || true
        docker rm   ${TEST_CONTAINER_NAME} || true
        docker rmi  ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true
      '''
    }
  }
} 